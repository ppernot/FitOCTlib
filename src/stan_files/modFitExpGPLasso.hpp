/*
    FitOCTLib is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FitOCTLib is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FitOCTLib.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_modFitExpGPLasso_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_modFitExpGPLasso");
    reader.add_event(141, 139, "end", "model_modFitExpGPLasso");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
gp_pred(const std::vector<T0__>& x2,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y1,
            const std::vector<T2__>& x1,
            const T3__& alpha,
            const T4__& rho,
            const T5__& delta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 14;
        int N1(0);
        (void) N1;  // dummy to suppress unused var warning

        stan::math::fill(N1, std::numeric_limits<int>::min());
        stan::math::assign(N1,rows(y1));
        current_statement_begin__ = 15;
        int N2(0);
        (void) N2;  // dummy to suppress unused var warning

        stan::math::fill(N2, std::numeric_limits<int>::min());
        stan::math::assign(N2,size(x2));
        current_statement_begin__ = 16;
        validate_non_negative_index("f2_mu", "N2", N2);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  f2_mu(static_cast<Eigen::VectorXd::Index>(N2));
        (void) f2_mu;  // dummy to suppress unused var warning

        stan::math::initialize(f2_mu, DUMMY_VAR__);
        stan::math::fill(f2_mu,DUMMY_VAR__);


        {
        current_statement_begin__ = 18;
        validate_non_negative_index("L_K", "N1", N1);
        validate_non_negative_index("L_K", "N1", N1);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L_K(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N1));
        (void) L_K;  // dummy to suppress unused var warning

        stan::math::initialize(L_K, DUMMY_VAR__);
        stan::math::fill(L_K,DUMMY_VAR__);
        current_statement_begin__ = 19;
        validate_non_negative_index("K_div_y1", "N1", N1);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  K_div_y1(static_cast<Eigen::VectorXd::Index>(N1));
        (void) K_div_y1;  // dummy to suppress unused var warning

        stan::math::initialize(K_div_y1, DUMMY_VAR__);
        stan::math::fill(K_div_y1,DUMMY_VAR__);
        current_statement_begin__ = 20;
        validate_non_negative_index("K_div_y2", "N1", N1);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  K_div_y2(static_cast<Eigen::VectorXd::Index>(N1));
        (void) K_div_y2;  // dummy to suppress unused var warning

        stan::math::initialize(K_div_y2, DUMMY_VAR__);
        stan::math::fill(K_div_y2,DUMMY_VAR__);
        current_statement_begin__ = 21;
        validate_non_negative_index("k_x1_x2", "N1", N1);
        validate_non_negative_index("k_x1_x2", "N2", N2);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  k_x1_x2(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N2));
        (void) k_x1_x2;  // dummy to suppress unused var warning

        stan::math::initialize(k_x1_x2, DUMMY_VAR__);
        stan::math::fill(k_x1_x2,DUMMY_VAR__);
        current_statement_begin__ = 22;
        validate_non_negative_index("K", "N1", N1);
        validate_non_negative_index("K", "N1", N1);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  K(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N1));
        (void) K;  // dummy to suppress unused var warning

        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K,DUMMY_VAR__);


        current_statement_begin__ = 23;
        stan::math::assign(K, cov_exp_quad(x1,alpha,rho));
        current_statement_begin__ = 24;
        for (int n = 1; n <= N1; ++n) {
            current_statement_begin__ = 25;
            stan::model::assign(K, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                        stan::model::deep_copy((get_base1(K,n,n,"K",1) + delta)), 
                        "assigning variable K");
        }
        current_statement_begin__ = 26;
        stan::math::assign(L_K, cholesky_decompose(K));
        current_statement_begin__ = 27;
        stan::math::assign(K_div_y1, mdivide_left_tri_low(L_K,y1));
        current_statement_begin__ = 28;
        stan::math::assign(K_div_y2, transpose(mdivide_right_tri_low(transpose(K_div_y1),L_K)));
        current_statement_begin__ = 29;
        stan::math::assign(k_x1_x2, cov_exp_quad(x1,x2,alpha,rho));
        current_statement_begin__ = 30;
        stan::math::assign(f2_mu, multiply(transpose(k_x1_x2),K_div_y2));
        }
        current_statement_begin__ = 32;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f2_mu);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gp_pred_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const std::vector<T0__>& x2,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y1,
            const std::vector<T2__>& x1,
            const T3__& alpha,
            const T4__& rho,
            const T5__& delta, std::ostream* pstream__) const {
        return gp_pred(x2, y1, x1, alpha, rho, delta, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic,1>
inhomo(const std::vector<T0__>& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& yGP,
           const std::vector<T2__>& xGP,
           const T3__& alpha,
           const T4__& rho, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 41;
        validate_non_negative_index("dL", "size(x)", size(x));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  dL(static_cast<Eigen::VectorXd::Index>(size(x)));
        (void) dL;  // dummy to suppress unused var warning

        stan::math::initialize(dL, DUMMY_VAR__);
        stan::math::fill(dL,DUMMY_VAR__);
        stan::math::assign(dL,gp_pred(x,yGP,xGP,alpha,rho,1.0000000000000001e-09, pstream__));


        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dL);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inhomo_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic,1>
    operator()(const std::vector<T0__>& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& yGP,
           const std::vector<T2__>& xGP,
           const T3__& alpha,
           const T4__& rho, std::ostream* pstream__) const {
        return inhomo(x, yGP, xGP, alpha, rho, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
phys_mod(const std::vector<T0__>& x,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& p,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& dL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 50;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,size(x));
        current_statement_begin__ = 51;
        validate_non_negative_index("m", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  m(static_cast<Eigen::VectorXd::Index>(N));
        (void) m;  // dummy to suppress unused var warning

        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m,DUMMY_VAR__);


        current_statement_begin__ = 52;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 53;
            stan::model::assign(m, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        (get_base1(p,1,"p",1) + (get_base1(p,2,"p",1) * stan::math::exp((-(get_base1(x,n,"x",1)) / (get_base1(p,3,"p",1) * (1 + get_base1(dL,n,"dL",1))))))), 
                        "assigning variable m");
        }
        current_statement_begin__ = 54;
        return stan::math::promote_scalar<fun_return_scalar_t__>(m);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct phys_mod_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<T0__>& x,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& p,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& dL, std::ostream* pstream__) const {
        return phys_mod(x, p, dL, pstream__);
    }
};

#include <meta_header.hpp>
 class model_modFitExpGPLasso : public prob_grad {
private:
    int N;
    vector<double> x;
    vector_d y;
    vector_d uy;
    int Np;
    vector_d theta0;
    matrix_d cor_theta;
    double ru_theta;
    int Nn;
    vector<double> xGP;
    double alpha_scale;
    double rho_scale;
    double lambda_rate;
    int prior_PD;
    vector<double> x_scaled;
    vector<double> xGP_scaled;
    matrix_d Sigma0;
public:
    model_modFitExpGPLasso(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_modFitExpGPLasso(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_modFitExpGPLasso_namespace::model_modFitExpGPLasso";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 61;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(N));
            validate_non_negative_index("x", "N", N);
            x = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                x[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 62;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
                y[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 63;
            validate_non_negative_index("uy", "N", N);
            context__.validate_dims("data initialization", "uy", "vector_d", context__.to_vec(N));
            validate_non_negative_index("uy", "N", N);
            uy = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("uy");
            pos__ = 0;
            size_t uy_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < uy_i_vec_lim__; ++i_vec__) {
                uy[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "Np", "int", context__.to_vec());
            Np = int(0);
            vals_i__ = context__.vals_i("Np");
            pos__ = 0;
            Np = vals_i__[pos__++];
            current_statement_begin__ = 67;
            validate_non_negative_index("theta0", "Np", Np);
            context__.validate_dims("data initialization", "theta0", "vector_d", context__.to_vec(Np));
            validate_non_negative_index("theta0", "Np", Np);
            theta0 = vector_d(static_cast<Eigen::VectorXd::Index>(Np));
            vals_r__ = context__.vals_r("theta0");
            pos__ = 0;
            size_t theta0_i_vec_lim__ = Np;
            for (size_t i_vec__ = 0; i_vec__ < theta0_i_vec_lim__; ++i_vec__) {
                theta0[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 68;
            validate_non_negative_index("cor_theta", "Np", Np);
            validate_non_negative_index("cor_theta", "Np", Np);
            context__.validate_dims("data initialization", "cor_theta", "matrix_d", context__.to_vec(Np,Np));
            validate_non_negative_index("cor_theta", "Np", Np);
            validate_non_negative_index("cor_theta", "Np", Np);
            cor_theta = matrix_d(static_cast<Eigen::VectorXd::Index>(Np),static_cast<Eigen::VectorXd::Index>(Np));
            vals_r__ = context__.vals_r("cor_theta");
            pos__ = 0;
            size_t cor_theta_k_mat_lim__ = Np;
            for (size_t n_mat__ = 0; n_mat__ < cor_theta_k_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < cor_theta_k_mat_lim__; ++m_mat__) {
                    cor_theta(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 69;
            context__.validate_dims("data initialization", "ru_theta", "double", context__.to_vec());
            ru_theta = double(0);
            vals_r__ = context__.vals_r("ru_theta");
            pos__ = 0;
            ru_theta = vals_r__[pos__++];
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "Nn", "int", context__.to_vec());
            Nn = int(0);
            vals_i__ = context__.vals_i("Nn");
            pos__ = 0;
            Nn = vals_i__[pos__++];
            current_statement_begin__ = 73;
            validate_non_negative_index("xGP", "Nn", Nn);
            context__.validate_dims("data initialization", "xGP", "double", context__.to_vec(Nn));
            validate_non_negative_index("xGP", "Nn", Nn);
            xGP = std::vector<double>(Nn,double(0));
            vals_r__ = context__.vals_r("xGP");
            pos__ = 0;
            size_t xGP_limit_0__ = Nn;
            for (size_t i_0__ = 0; i_0__ < xGP_limit_0__; ++i_0__) {
                xGP[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "alpha_scale", "double", context__.to_vec());
            alpha_scale = double(0);
            vals_r__ = context__.vals_r("alpha_scale");
            pos__ = 0;
            alpha_scale = vals_r__[pos__++];
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "rho_scale", "double", context__.to_vec());
            rho_scale = double(0);
            vals_r__ = context__.vals_r("rho_scale");
            pos__ = 0;
            rho_scale = vals_r__[pos__++];
            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "lambda_rate", "double", context__.to_vec());
            lambda_rate = double(0);
            vals_r__ = context__.vals_r("lambda_rate");
            pos__ = 0;
            lambda_rate = vals_r__[pos__++];
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
            prior_PD = int(0);
            vals_i__ = context__.vals_i("prior_PD");
            pos__ = 0;
            prior_PD = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 60;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 61;
            current_statement_begin__ = 62;
            current_statement_begin__ = 63;
            check_greater_or_equal(function__,"uy",uy,0);
            current_statement_begin__ = 66;
            check_greater_or_equal(function__,"Np",Np,1);
            current_statement_begin__ = 67;
            check_greater_or_equal(function__,"theta0",theta0,0);
            current_statement_begin__ = 68;
            stan::math::check_corr_matrix(function__,"cor_theta",cor_theta);
            current_statement_begin__ = 69;
            check_greater_or_equal(function__,"ru_theta",ru_theta,0);
            current_statement_begin__ = 72;
            check_greater_or_equal(function__,"Nn",Nn,0);
            current_statement_begin__ = 73;
            current_statement_begin__ = 74;
            check_greater_or_equal(function__,"alpha_scale",alpha_scale,0);
            current_statement_begin__ = 75;
            check_greater_or_equal(function__,"rho_scale",rho_scale,0);
            current_statement_begin__ = 76;
            check_greater_or_equal(function__,"lambda_rate",lambda_rate,0);
            current_statement_begin__ = 79;
            check_greater_or_equal(function__,"prior_PD",prior_PD,0);
            check_less_or_equal(function__,"prior_PD",prior_PD,1);
            // initialize data variables
            current_statement_begin__ = 82;
            validate_non_negative_index("x_scaled", "N", N);
            x_scaled = std::vector<double>(N,double(0));
            stan::math::fill(x_scaled,DUMMY_VAR__);
            current_statement_begin__ = 83;
            validate_non_negative_index("xGP_scaled", "Nn", Nn);
            xGP_scaled = std::vector<double>(Nn,double(0));
            stan::math::fill(xGP_scaled,DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("Sigma0", "Np", Np);
            validate_non_negative_index("Sigma0", "Np", Np);
            Sigma0 = matrix_d(static_cast<Eigen::VectorXd::Index>(Np),static_cast<Eigen::VectorXd::Index>(Np));
            stan::math::fill(Sigma0,DUMMY_VAR__);

            current_statement_begin__ = 87;
            stan::math::assign(Sigma0, quad_form_diag(cor_theta,multiply(ru_theta,theta0)));
            current_statement_begin__ = 90;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 91;
                stan::model::assign(x_scaled, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            ((get_base1(x,n,"x",1) - min(x)) / (max(x) - min(x))), 
                            "assigning variable x_scaled");
            }
            current_statement_begin__ = 92;
            for (int n = 1; n <= Nn; ++n) {
                current_statement_begin__ = 93;
                stan::model::assign(xGP_scaled, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            ((get_base1(xGP,n,"xGP",1) - min(x)) / (max(x) - min(x))), 
                            "assigning variable xGP_scaled");
            }

            // validate transformed data
            current_statement_begin__ = 82;
            current_statement_begin__ = 83;
            current_statement_begin__ = 84;
            stan::math::check_cov_matrix(function__,"Sigma0",Sigma0);

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 96;
            validate_non_negative_index("theta", "Np", Np);
            num_params_r__ += Np;
            current_statement_begin__ = 97;
            validate_non_negative_index("yGP", "Nn", Nn);
            num_params_r__ += Nn;
            current_statement_begin__ = 98;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_modFitExpGPLasso() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "Np", Np);
        context__.validate_dims("initialization", "theta", "vector_d", context__.to_vec(Np));
        vector_d theta(static_cast<Eigen::VectorXd::Index>(Np));
        for (int j1__ = 0U; j1__ < Np; ++j1__)
            theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        if (!(context__.contains_r("yGP")))
            throw std::runtime_error("variable yGP missing");
        vals_r__ = context__.vals_r("yGP");
        pos__ = 0U;
        validate_non_negative_index("yGP", "Nn", Nn);
        context__.validate_dims("initialization", "yGP", "vector_d", context__.to_vec(Nn));
        vector_d yGP(static_cast<Eigen::VectorXd::Index>(Nn));
        for (int j1__ = 0U; j1__ < Nn; ++j1__)
            yGP(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(yGP);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGP: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_lb_constrain(0,Np,lp__);
            else
                theta = in__.vector_lb_constrain(0,Np);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yGP;
            (void) yGP;  // dummy to suppress unused var warning
            if (jacobian__)
                yGP = in__.vector_constrain(Nn,lp__);
            else
                yGP = in__.vector_constrain(Nn);

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 101;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            stan::math::assign(alpha,(alpha_scale * sd(yGP)));
            current_statement_begin__ = 102;
            validate_non_negative_index("dL", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  dL(static_cast<Eigen::VectorXd::Index>(N));
            (void) dL;  // dummy to suppress unused var warning

            stan::math::initialize(dL, DUMMY_VAR__);
            stan::math::fill(dL,DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("m", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  m(static_cast<Eigen::VectorXd::Index>(N));
            (void) m;  // dummy to suppress unused var warning

            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m,DUMMY_VAR__);
            current_statement_begin__ = 104;
            validate_non_negative_index("resid", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  resid(static_cast<Eigen::VectorXd::Index>(N));
            (void) resid;  // dummy to suppress unused var warning

            stan::math::initialize(resid, DUMMY_VAR__);
            stan::math::fill(resid,DUMMY_VAR__);


            current_statement_begin__ = 106;
            if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 107;
                stan::math::assign(dL, inhomo(x_scaled,yGP,xGP_scaled,alpha,rho_scale, pstream__));
                current_statement_begin__ = 108;
                stan::math::assign(m, phys_mod(x,theta,dL, pstream__));
                current_statement_begin__ = 109;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 110;
                    stan::model::assign(resid, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (get_base1(y,n,"y",1) - get_base1(m,n,"m",1)), 
                                "assigning variable resid");
                }
            }

            // validate transformed parameters
            if (stan::math::is_uninitialized(alpha)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: alpha";
                throw std::runtime_error(msg__.str());
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(dL(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dL" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(m(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: m" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(resid(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: resid" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 101;
            check_greater_or_equal(function__,"alpha",alpha,0);
            current_statement_begin__ = 102;
            current_statement_begin__ = 103;
            current_statement_begin__ = 104;

            // model body

            current_statement_begin__ = 117;
            lp_accum__.add(normal_log<propto__>(sigma, 1, 0.10000000000000001));
            current_statement_begin__ = 120;
            lp_accum__.add(multi_normal_log<propto__>(theta, theta0, Sigma0));
            current_statement_begin__ = 123;
            lp_accum__.add((-(sum(stan::math::fabs(yGP))) / lambda_rate));
            current_statement_begin__ = 126;
            if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 127;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 128;
                    lp_accum__.add(normal_log<propto__>(0, get_base1(resid,n,"resid",1), (sigma * get_base1(uy,n,"uy",1))));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("yGP");
        names__.push_back("sigma");
        names__.push_back("alpha");
        names__.push_back("dL");
        names__.push_back("m");
        names__.push_back("resid");
        names__.push_back("br");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Np);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_modFitExpGPLasso_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d theta = in__.vector_lb_constrain(0,Np);
        vector_d yGP = in__.vector_constrain(Nn);
        double sigma = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < Np; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Nn; ++k_0__) {
            vars__.push_back(yGP[k_0__]);
            }
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 101;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            stan::math::assign(alpha,(alpha_scale * sd(yGP)));
            current_statement_begin__ = 102;
            validate_non_negative_index("dL", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  dL(static_cast<Eigen::VectorXd::Index>(N));
            (void) dL;  // dummy to suppress unused var warning

            stan::math::initialize(dL, DUMMY_VAR__);
            stan::math::fill(dL,DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("m", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  m(static_cast<Eigen::VectorXd::Index>(N));
            (void) m;  // dummy to suppress unused var warning

            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m,DUMMY_VAR__);
            current_statement_begin__ = 104;
            validate_non_negative_index("resid", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  resid(static_cast<Eigen::VectorXd::Index>(N));
            (void) resid;  // dummy to suppress unused var warning

            stan::math::initialize(resid, DUMMY_VAR__);
            stan::math::fill(resid,DUMMY_VAR__);


            current_statement_begin__ = 106;
            if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 107;
                stan::math::assign(dL, inhomo(x_scaled,yGP,xGP_scaled,alpha,rho_scale, pstream__));
                current_statement_begin__ = 108;
                stan::math::assign(m, phys_mod(x,theta,dL, pstream__));
                current_statement_begin__ = 109;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 110;
                    stan::model::assign(resid, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (get_base1(y,n,"y",1) - get_base1(m,n,"m",1)), 
                                "assigning variable resid");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 101;
            check_greater_or_equal(function__,"alpha",alpha,0);
            current_statement_begin__ = 102;
            current_statement_begin__ = 103;
            current_statement_begin__ = 104;

            // write transformed parameters
            if (include_tparams__) {
        vars__.push_back(alpha);
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(dL[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(m[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(resid[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 133;
            local_scalar_t__ br;
            (void) br;  // dummy to suppress unused var warning

            stan::math::initialize(br, DUMMY_VAR__);
            stan::math::fill(br,DUMMY_VAR__);


            current_statement_begin__ = 134;
            if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 136;
                stan::math::assign(br, (quad_form(inverse(multiply(pow(sigma,2),diag_matrix(elt_multiply(uy,uy)))),resid) / (N - ((Np + Nn) + 2))));
            }

            // validate generated quantities
            current_statement_begin__ = 133;

            // write generated quantities
        vars__.push_back(br);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_modFitExpGPLasso";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= Np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGP" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha";
            param_names__.push_back(param_name_stream__.str());
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dL" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resid" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "br";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= Np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGP" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha";
            param_names__.push_back(param_name_stream__.str());
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dL" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resid" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "br";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_modFitExpGPLasso_namespace::model_modFitExpGPLasso stan_model;


#endif
